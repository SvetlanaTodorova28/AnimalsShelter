// <auto-generated />
using System;
using AnimalShelter_FuryTales.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimalShelter_FuryTales.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240914204736_fix-avatar")]
    partial class fixavatar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MonthlyFoodExpenses")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Age = 3,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Description = "Friendly and energetic ",
                            Gender = 0,
                            Health = 0,
                            Image = "Layko.jpg",
                            MonthlyFoodExpenses = 50.00m,
                            Name = "Layko",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000033")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Age = 3,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Friendly and energetic ",
                            Gender = 0,
                            Health = 1,
                            Image = "Joro.jpg",
                            MonthlyFoodExpenses = 50.00m,
                            Name = "Joro",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000033")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Age = 2,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Quiet and curious stray",
                            Gender = 1,
                            Health = 0,
                            Image = "Sony.jpg",
                            MonthlyFoodExpenses = 45.00m,
                            Name = "Sony",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Age = 2,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Gentle, Rescued, Burro",
                            Gender = 1,
                            Health = 4,
                            Image = "Sonia.jpg",
                            MonthlyFoodExpenses = 45.00m,
                            Name = "Sonia",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            Age = 1,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Description = "This gentle, curious rabbit is eagerly waiting for a loving forever home",
                            Gender = 0,
                            Health = 0,
                            Image = "Uchcho.jpg",
                            MonthlyFoodExpenses = 50.00m,
                            Name = "Uchcho",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            Age = 11,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "This sweet, aging companion, despite his health challenges, still has plenty of love to give and is searching for a compassionate home to spend his golden years",
                            Gender = 0,
                            Health = 2,
                            Image = "default.jpg",
                            MonthlyFoodExpenses = 150.00m,
                            Name = "Pencho",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000033")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            Age = 4,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Description = "Meet this delightful little bunny! Ready to hop right into your heart and home, this friendly companion promises years of joy and friendship",
                            Gender = 0,
                            Health = 0,
                            Image = "Skokcho.jpg",
                            MonthlyFoodExpenses = 50.00m,
                            Name = "Skokcho",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            Age = 2,
                            BreedId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "This radiant ginger cat is a bundle of energy and affection. Eager for a warm lap to curl up on",
                            Gender = 1,
                            Health = 0,
                            Image = "Lyvcho.jpg",
                            MonthlyFoodExpenses = 45.00m,
                            Name = "Lyvcho",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Unknown",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Name = "Labrador",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000033")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Stray Dog",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000033")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Stray Cat",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Anatolian",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Hulstlander",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000008")
                        });
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.DonationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId1");

                    b.ToTable("DonationItems");
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            Name = "Dog"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Cat"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Donkey"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Bunny"
                        });
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DonationsTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000023",
                            Ability = "Healthcare course",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "YETANOTHERUNIQUESTRING",
                            Email = "penka@shelter.bg",
                            EmailConfirmed = true,
                            FirstName = "Penka",
                            Gender = 1,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "PENKA@SHELTER.BG",
                            NormalizedUserName = "PENKA@SHELTER.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXWTkIIMaihaWOnAaIxZ4AOssnYEvwYVNr3JBfGA61nKt9VjyGkfXKl2jJImuBEmg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/5.x/avataaars/svg?mouth=default&facialHairProbability=0&top%5B%5D=bigHair,bob,bun,curly,curvy,dreads,longButNotTooLong,shaggy,shavedSides,straightAndStrand,straight01,straight02&seed=penka",
                            SecurityStamp = "DIFFERENTUNIQUESTRING",
                            TwoFactorEnabled = false,
                            UserName = "penka@shelter.bg"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            Ability = "Healthcare course",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "YETANOTHERUNIQUESTRING",
                            Email = "mila@shelter.bg",
                            EmailConfirmed = true,
                            FirstName = "Mila",
                            Gender = 1,
                            LastName = "Nikolova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILA@SHELTER.BG",
                            NormalizedUserName = "MILA@SHELTER.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEIjEcxxzfnUcEtarzFqEtvQcQFFWF01ANKtA5luey+VZ15pMMYCjt5P647a7ttqocQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/5.x/avataaars/svg?mouth=default&facialHairProbability=0&top%5B%5D=bigHair,bob,bun,curvy,longButNotTooLong,shaggy,shaggyMullet,shavedSides,straightAndStrand,straight01,straight02&seed=mila",
                            SecurityStamp = "DIFFERENTUNIQUESTRING",
                            TwoFactorEnabled = false,
                            UserName = "mila@shelter.bg"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            Ability = "Healthcare course",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "YETANOTHERUNIQUESTRING",
                            Email = "ivan@shelter.bg",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            Gender = 0,
                            LastName = "Sybev",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@SHELTER.BG",
                            NormalizedUserName = "IVAN@SHELTER.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENpNFy99tncRgQP3dwX1ahBMZFkXCo941O6ZpzTu9er7n0XHfDoVVtxT/bVu1zuncQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/5.x/avataaars/svg?mouth=default&top%5B%5D=dreads01,dreads02,frizzle,shortCurly,shortFlat,shortRound,shortWaved,sides,theCaesar,theCaesarAndSidePart&seed=ivan",
                            SecurityStamp = "DIFFERENTUNIQUESTRING",
                            TwoFactorEnabled = false,
                            UserName = "ivan@shelter.bg"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000035",
                            Ability = "Cleaning",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "YETANOTHERUNIQUESTRING",
                            Email = "petyr@shelter.bg",
                            EmailConfirmed = true,
                            FirstName = "Petyr",
                            Gender = 0,
                            LastName = "Stoqnov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETYR@SHELTER.BG",
                            NormalizedUserName = "PETYR@SHELTER.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEKkk2YUoYtNLFoPC/vkn3f1vaz8lbrd1l/o8g2sAV2ivaHWnXjStqRXNoWfr15FvSQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/5.x/avataaars/svg?mouth=default&top%5B%5D=dreads01,dreads02,frizzle,shortCurly,shortFlat,shortRound,shortWaved,sides,theCaesar,theCaesarAndSidePart&seed=petyr",
                            SecurityStamp = "DIFFERENTUNIQUESTRING",
                            TwoFactorEnabled = false,
                            UserName = "petyr@shelter.bg"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000024",
                            Ability = "",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "YETANOTHERUNIQUESTRING",
                            Email = "sarah@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            Gender = 1,
                            LastName = "Vrout",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@GMAIL.COM",
                            NormalizedUserName = "SARAH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHvfFnLikw9MwivMtHsQ/x/UBQqTiCA+z1L2ZK7dbyEvoNYd1W9dFRMBRZ1caoawIA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/8.x/bottts/svg?seed=Sammy",
                            SecurityStamp = "DIFFERENTUNIQUESTRING",
                            TwoFactorEnabled = false,
                            UserName = "sarah@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000025",
                            Ability = "",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "YETANOTHERUNIQUESTRING",
                            Email = "tom@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tom",
                            Gender = 0,
                            LastName = "Calme",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO0L6g/amz69NOo11vExc1kOtrs057cMHaLHJjQcWoZb4Wkn+RoFaukbXNqqKYgGYg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/8.x/bottts/svg?seed=Sammy",
                            SecurityStamp = "DIFFERENTUNIQUESTRING",
                            TwoFactorEnabled = false,
                            UserName = "tom@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000022",
                            Ability = "Administration",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b277cc7-bcb0-4d91-8aab-08dc4b606f7a",
                            Email = "Admin@shelter.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SHELTER.BG",
                            NormalizedUserName = "ADMIN@SHELTER.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHmJ+54Q07HdyB/NIHN2sDxq6sl+0tPn43kME7AQ85Efd8JsH9mylvhnrljMu1lRog==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://api.dicebear.com/5.x/avataaars/svg?mouth=default&top%5B%5D=dreads01,dreads02,frizzle,shortCurly,shortFlat,shortRound,shortWaved,sides,theCaesar,theCaesarAndSidePart&seed=Admin",
                            SecurityStamp = "BABUNAPLANINAVHODCHETERI",
                            TwoFactorEnabled = false,
                            UserName = "Admin@shelter.bg"
                        });
                });

            modelBuilder.Entity("AnimalUser", b =>
                {
                    b.Property<Guid>("AnimalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnimalsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AnimalUser");

                    b.HasData(
                        new
                        {
                            AnimalsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UsersId = "00000000-0000-0000-0000-000000000023"
                        },
                        new
                        {
                            AnimalsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            UsersId = "00000000-0000-0000-0000-000000000023"
                        },
                        new
                        {
                            AnimalsId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UsersId = "00000000-0000-0000-0000-000000000014"
                        },
                        new
                        {
                            AnimalsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            UsersId = "00000000-0000-0000-0000-000000000014"
                        },
                        new
                        {
                            AnimalsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UsersId = "00000000-0000-0000-0000-000000000015"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            ConcurrencyStamp = "f9ad933b-16de-4fea-a7fa-3e41217d75b4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000021",
                            ConcurrencyStamp = "187a7ae0-f1d8-4787-832f-97bebfafbbd7",
                            Name = "Volunteer",
                            NormalizedName = "VOLUNTEER"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000027",
                            ConcurrencyStamp = "d8dd054c-8e1e-4411-8e20-8319fd5a6ac6",
                            Name = "Adopter",
                            NormalizedName = "ADOPTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000022",
                            RoleId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000023",
                            RoleId = "00000000-0000-0000-0000-000000000021"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000014",
                            RoleId = "00000000-0000-0000-0000-000000000021"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000015",
                            RoleId = "00000000-0000-0000-0000-000000000021"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000024",
                            RoleId = "00000000-0000-0000-0000-000000000027"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000025",
                            RoleId = "00000000-0000-0000-0000-000000000027"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.Animal", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.Breed", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId");
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.DonationItem", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimalUser", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AnimalShelter_FuryTales.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimalShelter_FuryTales.Core.Entities.Species", b =>
                {
                    b.Navigation("Breeds");
                });
#pragma warning restore 612, 618
        }
    }
}
